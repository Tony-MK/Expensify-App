"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_native_onyx_1 = require("react-native-onyx");
const QueuedOnyxUpdates_1 = require("@libs/actions/QueuedOnyxUpdates");
const ONYXKEYS_1 = require("@src/ONYXKEYS");
const waitForBatchedUpdates_1 = require("../utils/waitForBatchedUpdates");
const queuedOnyxUpdates = [
    { key: ONYXKEYS_1.default.NVP_TRY_FOCUS_MODE, value: true, onyxMethod: 'merge' },
    { key: ONYXKEYS_1.default.PREFERRED_THEME, value: 'system', onyxMethod: 'merge' },
    { key: ONYXKEYS_1.default.NVP_PREFERRED_LOCALE, value: 'en', onyxMethod: 'merge' },
    {
        key: ONYXKEYS_1.default.SESSION,
        value: {
            accountID: 18748326,
            authToken: 'testToken',
            email: 'abcd+2342424224@gmail.com',
            encryptedAuthToken: 'testEncryptedAuthToken',
            loading: false,
        },
        onyxMethod: 'merge',
    },
    { key: ONYXKEYS_1.default.IS_LOADING_APP, value: false, onyxMethod: 'merge' },
    {
        key: ONYXKEYS_1.default.CREDENTIALS,
        value: {
            autoGeneratedLogin: '',
            autoGeneratedPassword: '',
            login: 'abcd+2342424224@gmail.com',
        },
        onyxMethod: 'merge',
    },
    { key: ONYXKEYS_1.default.IS_SIDEBAR_LOADED, value: true, onyxMethod: 'merge' },
    { key: `${ONYXKEYS_1.default.COLLECTION.REPORT}2175919089355165`, value: { reportID: 'reportID' }, onyxMethod: 'merge' },
    {
        key: `${ONYXKEYS_1.default.COLLECTION.REPORT_ACTIONS}2175919089355165`,
        value: {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            '4135522899867010163': {
                reportActionID: '4135522899867010163',
            },
        },
        onyxMethod: 'merge',
    },
];
jest.mock('@src/CONFIG', () => ({
    IS_TEST_ENV: false,
}));
function getOnyxUpdateValue(key) {
    return queuedOnyxUpdates.find((item) => item.key === key)?.value;
}
async function testOnyxKeyValue(key) {
    const expectedValue = getOnyxUpdateValue(key);
    return new Promise((resolve) => {
        const connection = react_native_onyx_1.default.connect({
            key,
            waitForCollectionCallback: false,
            callback: (value) => {
                react_native_onyx_1.default.disconnect(connection);
                expect(value).toEqual(expectedValue);
                resolve();
            },
        });
    });
}
describe('actions/QueuedOnyxUpdates', () => {
    beforeAll(() => {
        react_native_onyx_1.default.init({
            keys: ONYXKEYS_1.default,
        });
    });
    beforeEach(() => {
        return react_native_onyx_1.default.clear().then(waitForBatchedUpdates_1.default);
    });
    describe('flushQueue', () => {
        it('should filter queued updates when currentAccountID is undefined', async () => {
            await (0, QueuedOnyxUpdates_1.queueOnyxUpdates)(queuedOnyxUpdates);
            await react_native_onyx_1.default.multiSet({
                [ONYXKEYS_1.default.SESSION]: null,
            });
            await (0, QueuedOnyxUpdates_1.flushQueue)();
            await testOnyxKeyValue(ONYXKEYS_1.default.NVP_TRY_FOCUS_MODE);
            await testOnyxKeyValue(ONYXKEYS_1.default.PREFERRED_THEME);
            await testOnyxKeyValue(ONYXKEYS_1.default.NVP_PREFERRED_LOCALE);
            await testOnyxKeyValue(ONYXKEYS_1.default.SESSION);
            await testOnyxKeyValue(ONYXKEYS_1.default.IS_LOADING_APP);
            await testOnyxKeyValue(ONYXKEYS_1.default.CREDENTIALS);
            await testOnyxKeyValue(ONYXKEYS_1.default.IS_SIDEBAR_LOADED);
            await new Promise((resolve) => {
                const connection = react_native_onyx_1.default.connect({
                    key: `${ONYXKEYS_1.default.COLLECTION.REPORT}2175919089355165`,
                    waitForCollectionCallback: false,
                    callback: (report) => {
                        react_native_onyx_1.default.disconnect(connection);
                        expect(report).toBeUndefined();
                        resolve();
                    },
                });
            });
            await new Promise((resolve) => {
                const connection = react_native_onyx_1.default.connect({
                    key: `${ONYXKEYS_1.default.COLLECTION.REPORT_ACTIONS}2175919089355165`,
                    waitForCollectionCallback: false,
                    callback: (report) => {
                        react_native_onyx_1.default.disconnect(connection);
                        expect(report).toBeUndefined();
                        resolve();
                    },
                });
            });
        });
        it('should not filter updates if currentAccountID is defined', async () => {
            await (0, QueuedOnyxUpdates_1.queueOnyxUpdates)(queuedOnyxUpdates);
            await react_native_onyx_1.default.multiSet({
                [ONYXKEYS_1.default.SESSION]: {
                    accountID: 1,
                },
            });
            await (0, QueuedOnyxUpdates_1.flushQueue)();
            await testOnyxKeyValue(ONYXKEYS_1.default.NVP_TRY_FOCUS_MODE);
            await testOnyxKeyValue(ONYXKEYS_1.default.PREFERRED_THEME);
            await testOnyxKeyValue(ONYXKEYS_1.default.NVP_PREFERRED_LOCALE);
            await testOnyxKeyValue(ONYXKEYS_1.default.SESSION);
            await testOnyxKeyValue(ONYXKEYS_1.default.IS_LOADING_APP);
            await testOnyxKeyValue(ONYXKEYS_1.default.CREDENTIALS);
            await testOnyxKeyValue(ONYXKEYS_1.default.IS_SIDEBAR_LOADED);
            await new Promise((resolve) => {
                const connection = react_native_onyx_1.default.connect({
                    key: `${ONYXKEYS_1.default.COLLECTION.REPORT}2175919089355165`,
                    waitForCollectionCallback: false,
                    callback: (report) => {
                        react_native_onyx_1.default.disconnect(connection);
                        expect(report).toEqual(getOnyxUpdateValue(`${ONYXKEYS_1.default.COLLECTION.REPORT}2175919089355165`));
                        resolve();
                    },
                });
            });
            await new Promise((resolve) => {
                const connection = react_native_onyx_1.default.connect({
                    key: `${ONYXKEYS_1.default.COLLECTION.REPORT_ACTIONS}2175919089355165`,
                    waitForCollectionCallback: false,
                    callback: (reportActions) => {
                        react_native_onyx_1.default.disconnect(connection);
                        expect(reportActions).toEqual(getOnyxUpdateValue(`${ONYXKEYS_1.default.COLLECTION.REPORT_ACTIONS}2175919089355165`));
                        resolve();
                    },
                });
            });
        });
    });
});
