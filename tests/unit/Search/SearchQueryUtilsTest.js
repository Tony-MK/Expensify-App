"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/naming-convention */
// we need "dirty" object key names in these tests
const Policy_1 = require("@libs/actions/Policy/Policy");
const CONST_1 = require("@src/CONST");
const SearchQueryUtils_1 = require("@src/libs/SearchQueryUtils");
const ONYXKEYS_1 = require("@src/ONYXKEYS");
const TestHelper_1 = require("../../utils/TestHelper");
const personalDetailsFakeData = {
    'johndoe@example.com': {
        accountID: 12345,
    },
    'janedoe@example.com': {
        accountID: 78901,
    },
};
jest.mock('@libs/PersonalDetailsUtils', () => {
    return {
        getPersonalDetailByEmail(email) {
            return personalDetailsFakeData[email];
        },
    };
});
// The default query is generated by default values from parser, which are defined in grammar.
// We don't want to test or mock the grammar and the parser, so we're simply defining this string directly here.
const defaultQuery = `type:expense sortBy:date sortOrder:desc`;
describe('SearchQueryUtils', () => {
    describe('getQueryWithUpdatedValues', () => {
        test('returns default query for empty value', () => {
            const userQuery = '';
            const result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual(defaultQuery);
        });
        test('returns query with updated amounts', () => {
            const userQuery = 'foo test amount:20000';
            const result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual(`${defaultQuery} amount:2000000 foo test`);
        });
        test('returns query with user emails substituted', () => {
            const userQuery = 'from:johndoe@example.com hello';
            const result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual(`${defaultQuery} from:12345 hello`);
        });
        test('returns query with user emails substituted and preserves user ids', () => {
            const userQuery = 'from:johndoe@example.com to:112233';
            const result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual(`${defaultQuery} from:12345 to:112233`);
        });
        test('returns query with all of the fields correctly substituted', () => {
            const userQuery = 'from:9876,87654 to:janedoe@example.com hello amount:150 test';
            const result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual(`${defaultQuery} from:9876,87654 to:78901 amount:15000 hello test`);
        });
        test('returns query with updated groupBy', () => {
            const userQuery = 'from:johndoe@example.com groupBy:reports';
            const result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual(`${defaultQuery} groupBy:reports from:12345`);
        });
    });
    describe('buildQueryStringFromFilterFormValues', () => {
        test('simple filter value', () => {
            const filterValues = {
                type: 'expense',
                status: CONST_1.default.SEARCH.STATUS.EXPENSE.ALL,
                policyID: ['12345'],
                amountLessThan: '100',
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense policyID:12345 amount<100');
        });
        test('with Policy ID', () => {
            const filterValues = {
                policyID: ['12345'],
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc policyID:12345');
        });
        test('with keywords', () => {
            const filterValues = {
                type: 'expense',
                status: CONST_1.default.SEARCH.STATUS.EXPENSE.ALL,
                policyID: ['67890'],
                merchant: 'Amazon',
                description: 'Electronics',
                keyword: 'laptop',
                category: ['electronics', 'gadgets'],
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense policyID:67890 merchant:Amazon description:Electronics laptop category:electronics,gadgets');
        });
        test('currencies and categories', () => {
            const filterValues = {
                type: 'expense',
                status: CONST_1.default.SEARCH.STATUS.EXPENSE.ALL,
                category: ['services', 'consulting'],
                currency: ['USD', 'EUR'],
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense category:services,consulting currency:USD,EUR');
        });
        test('has empty category values', () => {
            const filterValues = {
                type: 'expense',
                status: CONST_1.default.SEARCH.STATUS.EXPENSE.ALL,
                category: ['equipment', 'consulting', 'none,Uncategorized'],
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense category:equipment,consulting,none,Uncategorized');
        });
        test('empty filter values', () => {
            const filterValues = {};
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc');
        });
        test('array of from', () => {
            const filterValues = {
                type: 'expense',
                from: ['user1@gmail.com', 'user2@gmail.com'],
                to: ['user3@gmail.com'],
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense from:user1@gmail.com,user2@gmail.com to:user3@gmail.com');
        });
        test('complex filter values', () => {
            const filterValues = {
                type: 'expense',
                from: ['user1@gmail.com', 'user2@gmail.com'],
                to: ['user3@gmail.com'],
                dateAfter: '2025-03-01',
                dateBefore: '2025-03-10',
                amountLessThan: '1000',
                amountGreaterThan: '1',
                category: ['finance', 'insurance'],
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense from:user1@gmail.com,user2@gmail.com to:user3@gmail.com category:finance,insurance date>2025-03-01 date<2025-03-10 amount>1 amount<1000');
            expect(result).not.toMatch(CONST_1.default.VALIDATE_FOR_HTML_TAG_REGEX);
        });
        test('total filter values', () => {
            const filterValues = {
                type: 'expense',
                totalLessThan: '1000',
                totalGreaterThan: '1',
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense total>1 total<1000');
        });
        test('with withdrawal type filter', () => {
            const filterValues = {
                type: 'expense',
                status: CONST_1.default.SEARCH.STATUS.EXPENSE.ALL,
                withdrawalType: CONST_1.default.SEARCH.WITHDRAWAL_TYPE.EXPENSIFY_CARD,
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense withdrawalType:expensify-card');
        });
        test('with withdrawn filter', () => {
            const filterValues = {
                type: 'expense',
                status: CONST_1.default.SEARCH.STATUS.EXPENSE.ALL,
                withdrawnOn: CONST_1.default.SEARCH.DATE_PRESETS.LAST_MONTH,
            };
            const result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense withdrawn:last-month');
        });
    });
    describe('buildFilterFormValuesFromQuery', () => {
        test('category filter includes empty values', () => {
            const policyID = (0, Policy_1.generatePolicyID)();
            const queryString = 'sortBy:date sortOrder:desc type:expense category:none,Uncategorized,Maintenance';
            const queryJSON = (0, SearchQueryUtils_1.buildSearchQueryJSON)(queryString);
            const policyCategories = {
                [`${ONYXKEYS_1.default.COLLECTION.POLICY_CATEGORIES}${policyID}`]: {
                    Maintenance: {
                        enabled: true,
                        name: 'Maintenance',
                    },
                    Travel: {
                        enabled: true,
                        name: 'Travel',
                    },
                    Meals: {
                        enabled: true,
                        name: 'Meals',
                    },
                },
            };
            const policyTags = {};
            const currencyList = {};
            const personalDetails = {};
            const cardList = {};
            const reports = {};
            const taxRates = {};
            if (!queryJSON) {
                throw new Error('Failed to parse query string');
            }
            const result = (0, SearchQueryUtils_1.buildFilterFormValuesFromQuery)(queryJSON, policyCategories, policyTags, currencyList, personalDetails, cardList, reports, taxRates);
            expect(result).toEqual({
                type: 'expense',
                status: CONST_1.default.SEARCH.STATUS.EXPENSE.ALL,
                category: ['Maintenance', 'none,Uncategorized'],
            });
        });
    });
    describe('shouldHighlight', () => {
        it('returns false if either input is empty', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('', 'test')).toBe(false);
            expect((0, SearchQueryUtils_1.shouldHighlight)('Some text', '')).toBe(false);
        });
        it('matches exact word at beginning', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', 'Take')).toBe(true);
        });
        it('matches exact word in middle', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', '2-minute')).toBe(true);
        });
        it('matches phrase with leading space', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', ' 2-minute tour')).toBe(true);
        });
        it('matches with special characters', () => {
            // cspell:disable-next-line
            expect((0, SearchQueryUtils_1.shouldHighlight)('Explore the #%tự đặc biệt!', '#%tự')).toBe(true);
        });
        it('is case-insensitive', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', 'TOUR')).toBe(true);
        });
        it('does not match partial word in the middle', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', 'in')).toBe(false);
        });
        it('does not match incomplete trailing text', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', '2-minute to')).toBe(false);
        });
        it('matches multi-word phrase exactly', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', '2-minute tour')).toBe(true);
        });
        it('does not match words out of order', () => {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', 'tour 2-minute')).toBe(false);
        });
    });
    describe('sortOptionsWithEmptyValue', () => {
        it('should prioritize empty values at the start', () => {
            const options = ['B', 'A', CONST_1.default.SEARCH.CATEGORY_EMPTY_VALUE, 'C'];
            const sortedOptions = options.sort((a, b) => (0, SearchQueryUtils_1.sortOptionsWithEmptyValue)(a, b, TestHelper_1.localeCompare));
            expect(sortedOptions).toEqual([CONST_1.default.SEARCH.CATEGORY_EMPTY_VALUE, 'A', 'B', 'C']);
        });
        it('should sort non-empty values properly', () => {
            const options = ['B', 'A', 'C'];
            const sortedOptions = options.sort((a, b) => (0, SearchQueryUtils_1.sortOptionsWithEmptyValue)(a, b, TestHelper_1.localeCompare));
            expect(sortedOptions).toEqual(['A', 'B', 'C']);
        });
    });
    describe('similarSearchHash', () => {
        it('should return same similarSearchHash for two queries that are the same but use different sorting', () => {
            const queryJSONa = (0, SearchQueryUtils_1.buildSearchQueryJSON)('sortBy:date sortOrder:desc type:expense category:none,Uncategorized,Maintenance');
            const queryJSONb = (0, SearchQueryUtils_1.buildSearchQueryJSON)('sortBy:date sortOrder:asc type:expense category:none,Uncategorized,Maintenance');
            expect(queryJSONa?.similarSearchHash).toEqual(queryJSONb?.similarSearchHash);
        });
        it('should return same similarSearchHash for two queries that have same filters but different values', () => {
            const queryJSONa = (0, SearchQueryUtils_1.buildSearchQueryJSON)('sortBy:date sortOrder:desc type:expense feed:"oauth.americanexpressfdx.com 1001" posted:last-statement');
            const queryJSONb = (0, SearchQueryUtils_1.buildSearchQueryJSON)('sortBy:date sortOrder:desc type:expense feed:"1234_stripe" posted:last-month');
            expect(queryJSONa?.similarSearchHash).toEqual(queryJSONb?.similarSearchHash);
        });
        it('should return same similarSearchHash for queries with a date range', () => {
            const queryJSONa = (0, SearchQueryUtils_1.buildSearchQueryJSON)('type:expense withdrawal-type:reimbursement withdrawn:last-month');
            const queryJSONb = (0, SearchQueryUtils_1.buildSearchQueryJSON)('type:expense withdrawal-type:reimbursement withdrawn>2025-01-01 withdrawn<2025-01-03');
            expect(queryJSONa?.similarSearchHash).toEqual(queryJSONb?.similarSearchHash);
        });
        it('should return different similarSearchHash for two queries that have different types', () => {
            const queryJSONa = (0, SearchQueryUtils_1.buildSearchQueryJSON)('sortBy:date sortOrder:desc type:expense feed:"oauth.americanexpressfdx.com 1001"');
            const queryJSONb = (0, SearchQueryUtils_1.buildSearchQueryJSON)('sortBy:date sortOrder:desc type:trip feed:"oauth.americanexpressfdx.com 1001"');
            expect(queryJSONa?.similarSearchHash).not.toEqual(queryJSONb?.similarSearchHash);
        });
    });
});
