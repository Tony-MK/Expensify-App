"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_native_hybrid_app_1 = require("@expensify/react-native-hybrid-app");
const react_native_onyx_1 = require("react-native-onyx");
const CONFIG_1 = require("@src/CONFIG");
const CONST_1 = require("@src/CONST");
const ONYXKEYS_1 = require("@src/ONYXKEYS");
const EmptyObject_1 = require("@src/types/utils/EmptyObject");
const HybridApp_1 = require("./actions/HybridApp");
const Log_1 = require("./Log");
const NetworkStore_1 = require("./Network/NetworkStore");
function isAnonymousUser(sessionParam) {
    return sessionParam?.authTokenType === CONST_1.default.AUTH_TOKEN_TYPES.ANONYMOUS;
}
let currentHybridApp;
let currentTryNewDot;
let currentCredentials;
let currentSession;
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.HYBRID_APP,
    callback: (hybridApp) => {
        currentHybridApp = hybridApp;
        signInToOldDotAndChooseExperience(hybridApp, currentTryNewDot, currentCredentials, currentSession);
    },
});
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.NVP_TRY_NEW_DOT,
    callback: (tryNewDot) => {
        currentTryNewDot = tryNewDot;
        signInToOldDotAndChooseExperience(currentHybridApp, tryNewDot, currentCredentials, currentSession);
    },
});
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.CREDENTIALS,
    callback: (credentials) => {
        currentCredentials = credentials;
        signInToOldDotAndChooseExperience(currentHybridApp, currentTryNewDot, credentials, currentSession);
    },
});
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.SESSION,
    callback: (session) => {
        currentSession = session;
        signInToOldDotAndChooseExperience(currentHybridApp, currentTryNewDot, currentCredentials, session);
    },
});
let activePolicyID;
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.NVP_ACTIVE_POLICY_ID,
    callback: (newActivePolicyID) => {
        activePolicyID = newActivePolicyID;
    },
});
function shouldUseOldApp(tryNewDot) {
    if ((0, EmptyObject_1.isEmptyObject)(tryNewDot) || (0, EmptyObject_1.isEmptyObject)(tryNewDot.classicRedirect)) {
        return true;
    }
    return tryNewDot.classicRedirect.dismissed;
}
/**
 * Signs the user into OldDot when session and credentials are available,
 * then decides whether to stay in NewDot or switch to OldDot based on `nvp_tryNewDot`.
 */
function signInToOldDotAndChooseExperience(hybridApp, tryNewDot, credentials, session) {
    if (!CONFIG_1.default.IS_HYBRID_APP) {
        return;
    }
    if (!session?.authToken || !hybridApp?.useNewDotSignInPage) {
        return;
    }
    if (isAnonymousUser(session)) {
        (0, HybridApp_1.setReadyToShowAuthScreens)(true);
        return;
    }
    if (!credentials?.autoGeneratedLogin || !credentials?.autoGeneratedPassword) {
        return;
    }
    // Skip if we're already in the signing in flow, preventing multiple calls to signInToOldDot
    if (session?.autoAuthState === CONST_1.default.AUTO_AUTH_STATE.SIGNING_IN) {
        return;
    }
    Log_1.default.info(`[HybridApp] Performing sign-in on OldDot side`);
    react_native_hybrid_app_1.default.signInToOldDot({
        autoGeneratedLogin: credentials.autoGeneratedLogin,
        autoGeneratedPassword: credentials.autoGeneratedPassword,
        authToken: session.authToken,
        email: (0, NetworkStore_1.getCurrentUserEmail)() ?? '',
        // eslint-disable-next-line rulesdir/no-default-id-values
        policyID: activePolicyID ?? '',
    });
    if (tryNewDot !== undefined) {
        (0, HybridApp_1.setUseNewDotSignInPage)(false).then(() => {
            if (shouldUseOldApp(tryNewDot)) {
                (0, HybridApp_1.closeReactNativeApp)({ shouldSetNVP: false });
            }
            else {
                (0, HybridApp_1.setReadyToShowAuthScreens)(true);
            }
        });
    }
}
