"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_native_hybrid_app_1 = require("@expensify/react-native-hybrid-app");
var react_native_onyx_1 = require("react-native-onyx");
var CONFIG_1 = require("@src/CONFIG");
var CONST_1 = require("@src/CONST");
var ONYXKEYS_1 = require("@src/ONYXKEYS");
var EmptyObject_1 = require("@src/types/utils/EmptyObject");
var HybridApp_1 = require("./actions/HybridApp");
var Log_1 = require("./Log");
var NetworkStore_1 = require("./Network/NetworkStore");
function isAnonymousUser(sessionParam) {
    return (sessionParam === null || sessionParam === void 0 ? void 0 : sessionParam.authTokenType) === CONST_1.default.AUTH_TOKEN_TYPES.ANONYMOUS;
}
var currentHybridApp;
var currentTryNewDot;
var currentCredentials;
var currentSession;
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.HYBRID_APP,
    callback: function (hybridApp) {
        currentHybridApp = hybridApp;
        signInToOldDotAndChooseExperience(hybridApp, currentTryNewDot, currentCredentials, currentSession);
    },
});
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.NVP_TRY_NEW_DOT,
    callback: function (tryNewDot) {
        currentTryNewDot = tryNewDot;
        signInToOldDotAndChooseExperience(currentHybridApp, tryNewDot, currentCredentials, currentSession);
    },
});
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.CREDENTIALS,
    callback: function (credentials) {
        currentCredentials = credentials;
        signInToOldDotAndChooseExperience(currentHybridApp, currentTryNewDot, credentials, currentSession);
    },
});
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.SESSION,
    callback: function (session) {
        currentSession = session;
        signInToOldDotAndChooseExperience(currentHybridApp, currentTryNewDot, currentCredentials, session);
    },
});
var activePolicyID;
react_native_onyx_1.default.connectWithoutView({
    key: ONYXKEYS_1.default.NVP_ACTIVE_POLICY_ID,
    callback: function (newActivePolicyID) {
        activePolicyID = newActivePolicyID;
    },
});
function shouldUseOldApp(tryNewDot) {
    if ((0, EmptyObject_1.isEmptyObject)(tryNewDot) || (0, EmptyObject_1.isEmptyObject)(tryNewDot.classicRedirect)) {
        return true;
    }
    return tryNewDot.classicRedirect.dismissed;
}
/**
 * Signs the user into OldDot when session and credentials are available,
 * then decides whether to stay in NewDot or switch to OldDot based on `nvp_tryNewDot`.
 */
function signInToOldDotAndChooseExperience(hybridApp, tryNewDot, credentials, session) {
    var _a;
    if (!CONFIG_1.default.IS_HYBRID_APP) {
        return;
    }
    if (!(session === null || session === void 0 ? void 0 : session.authToken) || !(hybridApp === null || hybridApp === void 0 ? void 0 : hybridApp.useNewDotSignInPage)) {
        return;
    }
    if (isAnonymousUser(session)) {
        (0, HybridApp_1.setReadyToShowAuthScreens)(true);
        return;
    }
    if (!(credentials === null || credentials === void 0 ? void 0 : credentials.autoGeneratedLogin) || !(credentials === null || credentials === void 0 ? void 0 : credentials.autoGeneratedPassword)) {
        return;
    }
    // Skip if we're already in the signing in flow, preventing multiple calls to signInToOldDot
    if ((session === null || session === void 0 ? void 0 : session.autoAuthState) === CONST_1.default.AUTO_AUTH_STATE.SIGNING_IN) {
        return;
    }
    Log_1.default.info("[HybridApp] Performing sign-in on OldDot side");
    react_native_hybrid_app_1.default.signInToOldDot({
        autoGeneratedLogin: credentials.autoGeneratedLogin,
        autoGeneratedPassword: credentials.autoGeneratedPassword,
        authToken: session.authToken,
        email: (_a = (0, NetworkStore_1.getCurrentUserEmail)()) !== null && _a !== void 0 ? _a : '',
        // eslint-disable-next-line rulesdir/no-default-id-values
        policyID: activePolicyID !== null && activePolicyID !== void 0 ? activePolicyID : '',
    });
    if (tryNewDot !== undefined) {
        (0, HybridApp_1.setUseNewDotSignInPage)(false).then(function () {
            if (shouldUseOldApp(tryNewDot)) {
                (0, HybridApp_1.closeReactNativeApp)({ shouldSetNVP: false });
            }
            else {
                (0, HybridApp_1.setReadyToShowAuthScreens)(true);
            }
        });
    }
}
